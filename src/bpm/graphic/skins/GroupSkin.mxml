<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Z78
// Â© Copyright IBM Corporation 2007, 2013. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->
<ibm:NodeSkinBase xmlns="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:ibm="http://www.ibm.com/xmlns/prod/ilog/elixir/diagram/2010"
      xmlns:bpmn="bpm.graphic.icons.*" 
      width="90" height="50">

  <Metadata>
    [HostComponent("bpm.graphic.Group")]
  </Metadata> 

  <Script>
    <![CDATA[ 
      import com.ibm.ilog.elixir.diagram.utils.PathUtil;
      
      private var dashArray:Vector.<Number> = new <Number>[8, 5, 2, 5];
      private const r:Number = 10;
      
      /**
       *  @private
       */
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
      {
        path.data = PathUtil.createDashRoundPolyline(
          new <Point>[
            new Point(2*r, 0),
            new Point(unscaledWidth, 0),
            new Point(unscaledWidth, unscaledHeight),
            new Point(0, unscaledHeight),
            new Point(0, 0),
            new Point(2*r, 0)
            ], r, dashArray) + " z";
        
        super.updateDisplayList(unscaledWidth, unscaledHeight);
      }
    ]]> 
  </Script>
  
  <ibm:states>
    <s:State name="normal" />
    <s:State name="selected" stateGroups="Selected"/>
    <s:State name="normalAndShowsCaret" stateGroups="ShowsCaret"/>
    <s:State name="selectedAndShowsCaret" stateGroups="Selected,ShowsCaret"/>
    <s:State name="active"/>
    <s:State name="done"/>
  </ibm:states>
  
  <s:Group id="base" left="0" top="0" right="0" bottom="0" >
    
    <s:filters>
      <s:GlowFilter includeIn="ShowsCaret" color="{caretColor}" alpha="0.8" blurX="8" blurY="8">
      </s:GlowFilter>
    </s:filters>    

    <s:Rect id="rect" left="0" top="0" right="0" bottom="0" visible="{hostComponent.clickableInside}">
      <s:fill><s:SolidColor alpha="0"/></s:fill>
    </s:Rect>
    <s:Path id="path" >
      <s:stroke><s:SolidColorStroke weight="2" color="0xa0a0a0" /></s:stroke>
    </s:Path>
    
    <s:Group id="labelsGroup"  horizontalCenter="0" top="5">
      <s:Label id="labelElement" text="{hostComponent.label}" maxWidth="{base.width - 10}" textAlign="center" color="{color}" fontSize="12"/>
    </s:Group>
    
  </s:Group>
  
</ibm:NodeSkinBase>
