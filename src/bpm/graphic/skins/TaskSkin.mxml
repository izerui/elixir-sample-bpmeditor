<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Z78
// Â© Copyright IBM Corporation 2007, 2013. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->
<ibm:NodeSkinBase xmlns="http://ns.adobe.com/mxml/2009"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:s="library://ns.adobe.com/flex/spark" 
        xmlns:ibm="http://www.ibm.com/xmlns/prod/ilog/elixir/diagram/2010"
        xmlns:bpmn="bpm.graphic.icons.*" 
        width="90" height="50">

  <Metadata>
    [HostComponent("bpm.graphic.Task")]
  </Metadata> 
  
  <Declarations>
    <s:GlowFilter id="glowFilter" color="0x00FF00" strength="3" blurX="18" blurY="18"/>
    
    <s:AnimateFilter id="animateWaitEffect" 
                     target="{wait}"
                     repeatCount="0"
                     duration="250"
                     repeatBehavior="reverse"
                     bitmapFilter="{glowFilter}">
      <s:SimpleMotionPath property="alpha" valueFrom="0" valueTo="1"/>
    </s:AnimateFilter>
  </Declarations>
  
  <ibm:states>
    <s:State name="normal" />
    <s:State name="selected" stateGroups="Selected"/>
    <s:State name="normalAndShowsCaret" stateGroups="ShowsCaret"/>
    <s:State name="selectedAndShowsCaret" stateGroups="Selected,ShowsCaret"/>
    <s:State name="active"/>
    <s:State name="done"/>
  </ibm:states>

 
  <s:Group id="base" left="0" top="0" right="0" bottom="0" >
    <s:filters>
      <s:GlowFilter includeIn="ShowsCaret" color="{caretColor}" alpha="0.8" blurX="8" blurY="8">
      </s:GlowFilter>
    </s:filters>    

    <!-- indicators for monitoring status -->
    <mx:SWFLoader id="wait" top="-16" right="-8" includeIn="active" source="@Embed(source='images/wait.svg')" height="16" width="16"
                  add="{animateWaitEffect.play()}"
                  remove="{animateWaitEffect.stop()}"/>
    <mx:SWFLoader top="-16" right="-8" includeIn="done" source="@Embed(source='images/ok.svg')" height="16" width="16"/>

  
    <s:Rect id="rect" left="0" top="0" right="0" bottom="0" radiusX="5" radiusY="5" >
      <s:fill><s:SolidColor color="{backgroundColor}" /></s:fill>
      <s:stroke><s:SolidColorStroke weight="2" color="{borderColor}" /></s:stroke>
    </s:Rect>
    
    <s:Group id="markers" horizontalCenter="0" bottom="3"
       includeInLayout="{hostComponent.loop || hostComponent.multiInstance || hostComponent.compensation}"
       visible="{hostComponent.loop || hostComponent.multiInstance || hostComponent.compensation}"
       >
      <s:layout>
        <s:HorizontalLayout gap="3" />
      </s:layout>
      <bpmn:BPMNIcon includeInLayout="{hostComponent.loop}" visible="{hostComponent.loop}"
                    styleName="LoopMarker" openStrokeColor="0x444444"/>
      <bpmn:BPMNIcon includeInLayout="{hostComponent.multiInstance}" visible="{hostComponent.multiInstance}"
                    styleName="MultipleInstanceMarker" openStrokeColor="0x444444"/>
      <bpmn:BPMNIcon includeInLayout="{hostComponent.compensation}" visible="{hostComponent.compensation}"
                    styleName="CompensationMarker" filled="true" fillColor="0xdddddd" closedStrokeColor="0x444444"/>
    </s:Group>
    
    <s:Group id="labelsGroup"  horizontalCenter="0" verticalCenter="{-(markers.height+5)/2}">
      <s:Label id="labelElement" text="{hostComponent.label}" maxWidth="{base.width - 2}" textAlign="center" color="{color}" fontSize="12"/>
    </s:Group>
    
  </s:Group>
  
</ibm:NodeSkinBase>
